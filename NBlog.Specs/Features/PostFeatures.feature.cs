// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace NBlog.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Post creation and editing")]
    public partial class PostCreationAndEditingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PostFeatures.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Post creation and editing", "In order to show user blog posts\r\nAs a logged in user\r\nI should be able to create" +
                    " and edit posts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When logged in the logged in user should be able to create and edit a post")]
        [NUnit.Framework.CategoryAttribute("NoPosts")]
        [NUnit.Framework.CategoryAttribute("Authenticated")]
        public virtual void WhenLoggedInTheLoggedInUserShouldBeAbleToCreateAndEditAPost()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When logged in the logged in user should be able to create and edit a post", new string[] {
                        "NoPosts",
                        "Authenticated"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I am on the \"create post page\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputField",
                        "DataType",
                        "Input"});
            table1.AddRow(new string[] {
                        "Title",
                        "string",
                        "Demo title"});
            table1.AddRow(new string[] {
                        "ShortUrl",
                        "longstring",
                        "demopost"});
            table1.AddRow(new string[] {
                        "Content",
                        "string",
                        "Demo content"});
            table1.AddRow(new string[] {
                        "PublishDate",
                        "datetime",
                        "2011-10-01"});
            table1.AddRow(new string[] {
                        "Publish",
                        "bool",
                        "true"});
            table1.AddRow(new string[] {
                        "Tags",
                        "string",
                        "tag1, tag2"});
            table1.AddRow(new string[] {
                        "Categories",
                        "string",
                        "cat1, cat2"});
#line 10
 testRunner.When("I enter the following information", ((string)(null)), table1);
#line 19
 testRunner.And("I click the \"save\" button");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "ShortUrl",
                        "Content",
                        "PublishDate",
                        "Publish",
                        "Tags",
                        "Categories"});
            table2.AddRow(new string[] {
                        "Demo title",
                        "demopost",
                        "Demo content",
                        "2011-10-01",
                        "true",
                        "tag1, tag2",
                        "cat1, cat2"});
#line 20
 testRunner.Then("a post with the following content should have been created", ((string)(null)), table2);
#line 23
 testRunner.And("I should see a success message");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
